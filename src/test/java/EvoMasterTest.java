import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-08-24T11:53:06.747037+02:00[Europe/Oslo]
 * <br>
 * The generated test suite contains 5 tests
 * <br>
 * Covered targets: 46
 * <br>
 * Used time: 0h 0m 20s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * 
 */
public class EvoMasterTest {

    
    private static final SutHandler controller = new org.example.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0))
                .body("isEmpty()", is(true));
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"description\": \"5ssJgRa0xbBnL_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items/-1434869306")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items/-24580174")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"cost\": 706.0, " + 
                    " \"description\": \"0Sj4At5J\", " + 
                    " \"id\": -9.42889692E8, " + 
                    " \"name\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'id'", hasItem(numberMatches(1.0)))
                .body("'name'", hasItem(nullValue()))
                .body("'description'", hasItem(containsString("5ssJgRa0xbBnL_")))
                .body("'cost'", hasItem(nullValue()))
                .body("'id'", hasItem(numberMatches(2.0)))
                .body("'name'", hasItem(containsString("")))
                .body("'description'", hasItem(containsString("0Sj4At5J")))
                .body("'cost'", hasItem(numberMatches(706.0)));
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"cost\": 765.0, " + 
                    " \"id\": -1.935775929E9 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"description\": \"58I9adSr2\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"cost\": 837.0, " + 
                    " \"description\": \"nxM69EIJ\", " + 
                    " \"id\": 3.2636185092685143E18, " + 
                    " \"name\": \"Xrld\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"cost\": 279.0, " + 
                    " \"name\": \"hGS5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items/8534441")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items/296164526")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"description\": \"tOJKyM6DQKSB\", " + 
                    " \"name\": \"M\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items/436454434")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }


}
